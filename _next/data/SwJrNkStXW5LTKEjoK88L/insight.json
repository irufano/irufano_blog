{"pageProps":{"posts":[{"slug":"git-cheatsheets","meta":{"title":"Git Cheatsheet","date":"2024-11-01","description":"Git cheatsheet commonly used daily","author":"irufano","tags":["Git","Cheatheets"],"image":"https://git-scm.com/images/logos/2color-lightbg@2x.png"},"rawContent":"\n## List commit\n```sh\ngit log -n [number] \n\n# or use --oneline for simple logs\ngit log -n [number] --oneline\n```\n\n## Rebase\n\n```sh\ngit rebase [branch base]\n\n# rebase n commit from head\ngit rebase -i HEAD~n\n\n\n# rebase the root of commit (the first commit)\ngit rebase -i --root\n```\n\n## Cherry-pick\n\n```sh\ngit cherry-pick [commit-hash]\n\n# or multi commit\ngit cherry-pick [commit-hash] [commit-hash] [commit-hash] \n```\n\n## Stash\n\n```sh\ngit stash\n\n# stash include untracked file\ngit stash --include-untracked\n\n# list stash\ngit stash list\n\n# pop stash\ngit stash pop stash@{n}\n\n# apply stash but keep stash log\ngit stash apply stash@{n)\n\n# remove specific stash\ngit stash drop stash@{n}\n```\n\n## Rename Branch\n### local\n```sh\ngit branch -m <new_name>\n# or\ngit branch -m <old_name> <new_name>\n```\n### remote\n```sh\ngit branch -m <new_name>\n# or\ngit branch -m <old_name> <new_name>\n\n# Then push the <new_name> local branch and reset the upstream branch\ngit push origin -u <new_name>\n\n# Then delete the <old_name> remote branch and finish!\ngit push origin --delete <old_name>\n```\n\n## Tag\n```sh\n# add tag local\ntag -a [TAGE_NAME] -m \"[TAGE_MESSAGE]\"\n\n# push tag to remote\ngit push origin [TAGE_NAME]\n\n# remove tag local\ngit tag -d [TAGE_NAME]\n\n# remove tag remote\ngit push -d origin [TAGE_NAME]\n\n# To get the most recent tag\ngit describe --tags --abbrev=0\n\n# To get the most recent tag, with the number of additional commits on top of the tagged object & more\ngit describe --tags \n\n# To get the most recent annotated tag\ngit describe --abbrev=0\n\n```\n\n## Edit last commit date\n```sh\ngit commit --amend --no-edit --date \"12/30/2024 10:19:19 +0700\" \n```","readingTime":"2 min read"},{"slug":"gen-ai-concepts","meta":{"title":"Generative AI Key Concepts","date":"2024-09-24","description":"Machine learning is a subset of AI that involves developing algorithms that allow computers to learn from & make predictions or decisions based on data.","author":"irufano","tags":["AI","Generative AI"],"image":"https://raw.githubusercontent.com/microsoft/generative-ai-for-beginners/main/01-introduction-to-genai/images/AI-diagram.png"},"rawContent":"\n## Definition\n\nGenerative AI refers to a type of artificial intelligence that creates new content, such as images, text, audio, or even video, based on patterns and data it has learned. What makes it a fantastic technology is that it democratizes AI, anyone can use it with as little as a text prompt, a sentence written in a natural language. There's no need for you to learn a language like Java or SQL to accomplish something worthwhile, all you need is to use your language, state what you want and out comes a suggestion from an AI model. The applications and impact for this is huge, you write or understand reports, write applications and much more, all in seconds.\n\nAfter decades of research in the AI field, a new model architecture – called Transformer – overcame the limits of RNNs, being able to get much longer sequences of text as input. Transformers are based on the attention mechanism, enabling the model to give different weights to the inputs it receives, ‘paying more attention’ where the most relevant information is concentrated, regardless of their order in the text sequence.\n\nMost of the recent generative AI models – also known as Large Language Models (LLMs), since they work with textual inputs and outputs – are indeed based on this architecture. What’s interesting about these models – trained on a huge amount of unlabeled data from diverse sources like books, articles and websites – is that they can be adapted to a wide variety of tasks and generate grammatically correct text with a semblance of creativity. So, not only did they incredibly enhance the capacity of a machine to ‘understand’ an input text, but they enabled their capacity to generate an original response in human language.\n\n## How do large language models work?\n\n### Tokenization\n\nLarge Language Models receive a text as input and generate a text as output. However, being statistical models, they work much better with numbers than text sequences. That’s why every input to the model is processed by a tokenizer, before being used by the core model. A token is a chunk of text – consisting of a variable number of characters, so the tokenizer's main task is splitting the input into an array of tokens. Then, each token is mapped with a token index, which is the integer encoding of the original text chunk.\n\n![image](https://github.com/irufano/generative-ai-for-beginners/raw/main/01-introduction-to-genai/images/tokenizer-example.png?WT.mc_id=academic-105485-koreyst)\n\n### Predicting output tokens\n\nGiven n tokens as input (with max n varying from one model to another), the model is able to predict one token as output. This token is then incorporated into the input of the next iteration, in an expanding window pattern, enabling a better user experience of getting one (or multiple) sentence as an answer. This explains why, if you ever played with ChatGPT, you might have noticed that sometimes it looks like it stops in the middle of a sentence.\n\n### Selection process\n\nThe output token is chosen by the model according to its probability of occurring after the current text sequence. This is because the model predicts a probability distribution over all possible ‘next tokens’, calculated based on its training. However, not always the token with the highest probability is chosen from the resulting distribution. A degree of randomness is added to this choice, in a way that the model acts in a non-deterministic fashion - we do not get the exact same output for the same input. This degree of randomness is added to simulate the process of creative thinking and it can be tuned using a model parameter called temperature.\n\n## Custom Knowledge Base\n\nTo add a knowledge base to an OpenAI-powered chatbot or application, you can use a variety of approaches depending on how dynamic and structured you want your knowledge base to be. Here are some common methods:\n\n###  Embedding Knowledge with Fine-Tuning\n- **Fine-tuning**: You can fine-tune the OpenAI model on your specific knowledge base or domain. This involves training the model on a custom dataset (such as product information, FAQs, internal documents) to improve its responses.\n  - Steps:\n    - Collect data (e.g., text documents, structured data).\n    - Format it into the proper input-output pairs (prompts and completions).\n    - Fine-tune the model using OpenAI's fine-tuning API.\n- **Use case**: Best for cases where knowledge is mostly static and doesn’t change often.\n\n### Use Knowledge Base API and Dynamic Retrieval\n\n- **External APIs**: Integrate the chatbot with a real-time knowledge base, such as a MySQL database, content management system, or external API.\n  - **Method**: Implement a retrieval mechanism that allows the chatbot to fetch answers from your dynamic database based on user queries. For instance, using vector embeddings to match user queries with the most relevant content in the database.\n  - **Tools**: You can use libraries like langchain to facilitate this process, creating a pipeline that pulls data dynamically based on user input.\n- **Use case**: Useful when your knowledge base is large, changes frequently, or needs to handle complex queries.\n\n### Contextual Knowledge with Prompts\n\n- **Long prompts with context**: You can inject specific information about your knowledge base directly into the prompt as context.\n  - **Method**: Before each query, construct a detailed prompt that includes relevant information from your knowledge base, which the model will use to provide context-aware answers.\n  - **Use case**: Best for handling small sets of information or specific queries where the information needed is known beforehand.\n\n### Augmenting with Vector Databases (e.g., Pinecone, FAISS)\n\n- **Vector search**: Store your knowledge base as embeddings in a vector database (like Pinecone, Weaviate, or FAISS). When a user asks a question, convert it to a vector, search for the most relevant knowledge entry, and use the result as part of the answer.\n  - **Method**: Convert text to embeddings using OpenAI or other models, and retrieve the most similar data points in response to a user query.\n  - **Use case:** Perfect for large datasets where similarity search is required to find relevant answers.\n\n### Hybrid Approach with LangChain and FastAPI\n\n- LangChain: LangChain enables building large language model (LLM) applications that can dynamically interact with databases and external systems. It helps set up a chatbot that can fetch data from knowledge bases like databases, APIs, and even web pages.\n  - Steps:\n    1. Store Knowledge: Define a knowledge base, which could be a SQL database, document store, or API.\n    2. Query Execution: Use an LLM with the LangChain framework to query the knowledge base dynamically.\n    3. FastAPI Integration: Combine this with FastAPI for serving the chatbot with dynamic knowledge retrieval.\n\n### Document Retrieval with Plugins or Middleware\n\n- OpenAI Plugins: If you're using OpenAI in an application, consider building or using a plugin or middleware that acts as a bridge to your knowledge base. For example, retrieving documents, querying databases, or even triggering workflows (e.g., customer support tickets) based on the query.\n- Use case: Ideal for more complex enterprise solutions, where OpenAI can function alongside existing systems.\n\n### Hybrid QA Pipelines (LLM + Traditional Search)\n\n- **Combining LLMs with traditional search**: You can combine the capabilities of language models with traditional search mechanisms like Elasticsearch or other keyword-based systems.\n  - **Method**: First, use search engines to retrieve relevant documents, and then pass those documents to OpenAI for processing and summarization.\n  - **Use case**: Works well in applications where quick retrieval from a large corpus of documents is needed, and then those documents are summarized or clarified by the LLM.","readingTime":"7 min read"},{"slug":"machine-learning-concepts","meta":{"title":"Machine Learning Key Concepts","date":"2024-09-17","description":"Machine learning is a subset of AI that involves developing algorithms that allow computers to learn from & make predictions or decisions based on data.","author":"irufano","tags":["Machine Learning"],"image":"https://ogrisel.github.io/scikit-learn.org/sklearn-tutorial/_images/plot_ML_flow_chart_12.png"},"rawContent":"\n## Definition\n\nMachine learning (ML) is a subset of artificial intelligence (AI) that involves developing algorithms that allow computers to learn from and make predictions or decisions `based on data`. Instead of being explicitly programmed to perform tasks, machine learning models `identify patterns` in data and improve their performance as they are exposed to more data over time.\n\n## Traditional Programming VS ML\n\n### Traditional Programming\n\nTraditional programming is a manual process—meaning a person (programmer) creates the program. But without anyone programming the logic, one has to manually formulate or code rules.\n\n> [note]: **Traditional Programming**\n> INPUT + PROGRAM = OUTPUT\n\n### Machine Learning\nIn machine learning, on the other hand, the algorithm automatically formulates the rules from the data.\n\n> [note]: **Machine Learning**\n> INPUT + OUTPUT = PROGRAM (Model)\n\n## Rules for Using ML\n\nThere are 3 rules that are needed when we are going to use machine learning. One is mandatory and the other 2 are optional.\n\n### Data\n\nData is mandatory rule. When we use machine learning, ensure we have `data`, specially `historical data` because machine learning is learned from experience, where one of the experiences is historical data. Once we have data we can probably use machine learning.\n\n### Pattern (Optional)\n\nWe must know that the problems we face have a `pattern`. One form of machine learning is pattern recognition. Once we know that the problem has pattern we can probably use machine learning, but if the problem has random stuff is can be hard to use machine learning.\n\n### The problem cannot be derived mathematically (Optional)\n\nWhen we use machine learning it is better the problem `can't be derived mathematically`. If the problem can be derived mathematically then actually the problem can be programmed explicitly, example determining odd-even numbers etc. But there are problem that have pattern and can't be derived mathematically, example disease detection, desease detection cannot be derived into mathematic formula.\n\n\n## Machine Learning Type\n\n### Supervised Learning\n\nIn supervised learning, the algorithm is trained on a dataset that contains both input features (data) and corresponding output labels (desired results). So in supervised learning requires `data` and `labels` as input. There are 2 types of supervised learning `Classification` and `Regression`.\n\nCharacteristics of Supervised Learning:\n\n1. **Labeled Data**: The training data includes input-output pairs. Each example in the dataset comes with a label or outcome. For example:     \n   - Input: Features like height, weight, and age.\n   - Output: A label like \"healthy\" or \"unhealthy\" for a health prediction model.\n\n2. **Goal**: The algorithm tries to minimize the difference between its predicted outputs and the actual outputs by finding the best mapping from inputs to outputs during training.\n\n3. **Training Process**: \n   - The model is fed with a labeled dataset (both input features and output labels).\n   - The model makes predictions and compares them to the actual labels.\n   - Based on this comparison, the model adjusts its internal parameters to improve accuracy.\n   - This process repeats until the model achieves satisfactory performance on the training data.\n\n#### Classification\n\n> [note]: F(X) => [0,1] \n> \n> *or*\n> \n> F(X) => [0,1,2,...]\n\n- The goal is to assign data points to predefined `categories` or `classes`.\n- **Binary Classification**: Two possible classes (e.g., spam vs. non-spam emails).\n- **Multi-class Classification**: More than two classes (e.g., classifying types of flowers into species).\n- **Examples**:\n  - Diagnosing diseases as “positive” or “negative”.\n  - Credit Scoring as \"accepted\" or \"rejected\"\n  - Classifying whether a customer will churn or stay.\n\n#### Regression\n\n> [note]: F(X) => R\n\n- The goal is to predict continuous values (`numerical outcomes`).\n- **Examples**:\n  - Predicting house prices based on features like size and location.\n  - Forecasting stock prices.\n  - Predicting the temperature at a specific location.\n\n#### Supervised learning model pipeline\n\n![Supervised learning models](https://ogrisel.github.io/scikit-learn.org/sklearn-tutorial/_images/plot_ML_flow_chart_12.png)\n<p class=\"text-sm\">Image by: <a class=\"no-underline\" href=\"https://ogrisel.github.io/scikit-learn.org/sklearn-tutorial/tutorial/text_analytics/general_concepts.html#supervised-learning-model-fit-x-y\">scikit-learn</a></p>\n\n### Unsupervised Learning\n\nUnsupervised learning is a type of machine learning where the model is trained on data that has no labeled outcomes. Unlike supervised learning, where the goal is to map inputs to specific labels, unsupervised learning focuses on uncovering the underlying structure or patterns within the data. The primary objective is to discover hidden relationships or groupings without human intervention or guidance.\nIncluded in unsupervised learning are clustering, Dimensionality Reduction etc.\n\nCharacteristic of Unsupervised Learning:\n1. **No Labels**: The data used in unsupervised learning is not labeled. The model works on its own to detect patterns, clusters, or associations without predefined categories or answers.\n2. **Exploratory**: It’s primarily used for data exploration to find patterns, groupings, or structures in the data.\n3. **Unstructured Data**: Often applied to unstructured or unlabeled datasets, such as customer purchase data, social media activity, or image datasets.\n\n#### Clustering\n\n- The goal is to `group data points` into clusters such that items in the same group are more similar to each other than to those in other groups.\n  \n- **Examples**: \n  - Grouping customers based on purchasing behavior to create customer segments for targeted marketing.\n  - Clustering desease\n\n#### Dimensionality Reduction\n\n- The goal is to `reduce the number of features` (or dimensions) in the data while retaining the most important information. This can help visualize high-dimensional data or improve the performance of machine learning models.\n\n- **Example**: Reducing the number of variables in a gene expression dataset from thousands to a smaller, more manageable set of features.\n  \n#### Association\n\n- The goal is to find `relationships between variables` in large datasets. It’s commonly used in market basket analysis to find items that frequently appear together in transactions.\n\n- **Example**: Identifying that customers who buy bread often buy butter as well.\n\n#### Anomaly Detection\n\n- The goal is to identify `outliers or unusual data points` that do not conform to the expected pattern. This can be critical in fields like fraud detection or predictive maintenance.\n\n- **Example**: Detecting fraudulent credit card transactions based on deviations from normal spending behavior.\n\n#### Unsupervised learning model pipeline\n\n![Unsupervised learning models](https://ogrisel.github.io/scikit-learn.org/sklearn-tutorial/_images/plot_ML_flow_chart_32.png)\n<p class=\"text-sm\">Image by: <a class=\"no-underline\" href=\"https://ogrisel.github.io/scikit-learn.org/sklearn-tutorial/tutorial/text_analytics/general_concepts.html#unsupervised-learning-model-fit-x\">scikit-learn</a></p>\n\n\n### Reinforcement Learning\n\nReinforcement Learning (RL) is a type of machine learning in which an agent learns to make decisions by interacting with an environment in order to `maximize a reward`. Unlike supervised or unsupervised learning, reinforcement learning does not rely on labeled datasets or direct supervision. Instead, the agent `learns through trial and error`, receiving feedback in the form of rewards or penalties for actions it takes.\n\nApplications of Reinforcement Learning:\n- **Game AI**: RL has been used to achieve superhuman performance in games like chess (AlphaZero), Go, and video games (e.g., Atari, Dota 2). Algorithms like Deep Q-Networks (DQN) and AlphaGo have demonstrated the power of RL in strategic decision-making.\n\n- **Robotics**: RL is widely used in robotics for tasks like navigation, manipulation, and locomotion, where robots learn to interact with the physical environment through trial and error.\n\n- **Autonomous Vehicles**: Self-driving cars use reinforcement learning to make decisions about navigation, lane changing, and collision avoidance in dynamic, unpredictable environments.\n\n- **Healthcare**: RL\n\n#### The Reinforcement Learning Process\n1. **Initialization**: The agent starts in an initial state and does not know how the environment works.\n\n2. **Action Selection**: The agent selects an action based on its current policy.\n\n3. **Transition**: The action changes the state of the environment.\n\n4. **Reward**: The agent receives feedback (a reward) from the environment.\n\n5. **Learning**: Based on the reward, the agent updates its knowledge (usually the value function or policy) to improve future actions.\n\n6. **Repeat**: The process continues, with the agent learning and adapting its strategy over time to maximize cumulative rewards.\n","readingTime":"7 min read"},{"slug":"post-docs","meta":{"title":"Insight Posts Documentation","date":"2024-09-15","description":"Documentation about insight post creation with markdown include meta data, section, paragraph etc.","author":"irufano","tags":["Markdown"]},"rawContent":"\nDocumentation about insight post creation with markdown. Use markdown for post, below the complete documentation:\n\n## Meta Data\n\nMeta data used in this post are `title`, `date`, `description`, `author` and `tags`. Title at this meta data used for title post. \n\n```js title=\"your-post.md\"\n---\ntitle: \"Your Post Title\"\ndate: \"2024-09-15\"\ndescription: \"Your post description\"\nauthor: \"author\"\ntags:\n  - your tag\n  - other tag\n---\n```\n\n## Paragraph\n\nTo create paragraph on post same like create paragraph as text.\n\n```md title=\"your-post.md\"\n<!-- first paragraph -->\nCommodo eu in adipisicing id eu elit nisi exercitation ipsum mollit cupidatat consequat non. Aute elit nulla sit ipsum pariatur do do esse culpa laboris. Officia est non reprehenderit adipisicing officia deserunt consectetur aute exercitation magna laboris ipsum ut. Veniam reprehenderit Lorem commodo et adipisicing dolor Lorem commodo do incididunt. Id tempor culpa laborum eiusmod est veniam. Officia fugiat mollit dolor adipisicing tempor voluptate proident qui.\n\n<!-- second paragraph -->\nLaboris nulla et amet fugiat. Sit amet ad quis in consequat esse incididunt velit est nulla. Irure exercitation excepteur eiusmod mollit ea aute ut qui exercitation aliquip ipsum cupidatat. Sint anim cillum velit magna aliqua officia eu eu reprehenderit tempor aliqua veniam dolore duis. Qui sunt mollit qui exercitation nulla in ullamco fugiat esse cupidatat officia. Eu ipsum enim velit tempor magna ea dolor sint Lorem.\n```\n\n## Image\n\nTo add image on post, you must put image on public directory, then access it on post with \n\n```md title=\"your-post.md\"\n![Alt text for the image](/yourpath_image.png)\n```\n\n## Section\n\nThe section will show on the right of the post. The section that will show only `##` and the `###`.\n\n```md title=\"your-post.md\"\n## Section 1\n\nEiusmod sint laborum nostrud aliquip excepteur reprehenderit id in aliqua.\n\n### Section 1.1\n\nNisi veniam et fugiat nostrud nulla incididunt ut eiusmod eiusmod ex velit sunt Lorem.\n\n## Section 2\n\nPariatur magna sit pariatur in sit ex quis nulla nostrud ipsum proident cillum et et.\n\n## Section 2.1\nExcepteur dolor dolor pariatur dolore exercitation.\n```\n\n## Bullet and Numbering\nTo create bullet and numbering you can use `-` or `^[0-9]+$` for numbering.\n\n```md title=\"your-post.md\"\n- bullet 1\n- bullet 2\n- bullet 3\n\n1. number 1\n2. number 2\n3. number 3\n```\n\n- bullet 1\n- bullet 2\n- bullet 3\n\n1. number 1\n2. number 2\n3. number 3\n\n## Emphasis \nTo create emphasis on post like *this is emphasis*. We can use `*` between word or sentence.\n\n```md title=\"your-post.md\"\n*This is emphasis*\n\n*Hello*\n\n*Good Morning*\n```\n\n## Strong\nTo create strong text on post like **this is strong**. We can use `**` between word or sentence.\n\n```md title=\"your-post.md\"\n**This is strong**\n\n**Hello**\n\n**Good Morning**\n```\n\n## Code\n### Inline Code\nTo create inline code on post like `this is inline code`. We can use **`** between word or sentence.\n\n```md title=\"your-post.md\"\n`This is inline code`\n\n`Hello`\n\n`Good Morning`\n```\n\n### Code Block\nTo create code block on post. Follow the example below:\n\n```markdown title=\"your-post.md\"\n'```js title=\"your-code-title.js\"\nfuntion getData () => {\n    console.log(\"Hello world!\");\n}\n```'\n\n<!-- remove ' -->\n```\n\n## Blockquote\n\n### Info\n\n```markdown title=\"your-post.md\"\n> [info]:\n>\n> this is info blockquote example\n```\noutput:\n\n> [info]:\n>\n> this is info blockquote example\n\n### Warning\n\n```markdown title=\"your-post.md\"\n> [warning]:\n>\n> this is warning blockquote example\n```\noutput:\n\n> [warning]:\n>\n> this is warning blockquote example\n\n### Tip\n\n```markdown title=\"your-post.md\"\n> [tip]:\n>\n> this is tip blockquote example\n```\noutput:\n\n> [tip]:\n>\n> this is tip blockquote example\n\n### Important\n\n```markdown title=\"your-post.md\"\n> [important]:\n>\n> this is important blockquote example\n```\noutput:\n\n> [important]:\n>\n> this is important blockquote example\n\n### caution\n\n```markdown title=\"your-post.md\"\n> [caution]:\n>\n> this is caution blockquote example\n```\noutput:\n\n> [caution]:\n>\n> this is caution blockquote example\n\n### Note\n\nNote block is doesn't have title header.\n\n```markdown title=\"your-post.md\"\n> [note]:\n>\n> this is note blockquote example\n```\noutput:\n\n> [note]: This is note *blockquote* `example`\n>\n> Cillum adipisicing sint cupidatat mollit duis.\n>\n> Tempor proident veniam est veniam minim minim consectetur cupidatat Lorem cupidatat adipisicing. Ea ipsum excepteur pariatur non cupidatat amet exercitation enim id fugiat officia nostrud. Velit laboris laboris qui labore dolore fugiat mollit in laborum labore Lorem.\n>\n>\n> ```js title=\"your-code-title.js\"\n> funtion getData () => {\n>    console.log(\"Hello world!\");\n> }\n> ```","readingTime":"4 min read"}],"currentPage":1,"totalPages":1},"__N_SSG":true}